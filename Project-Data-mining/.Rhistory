#================================Decision tree
tree = rpart(A16~A3+A8+A11, train)
print(tree)
treePlot = rpart.plot(tree, extra = 4)
#Evaluation du jeux d'entrainement à l'aide de a matrice de confision
predictTrain = predict(tree, newdata = train, type="class")
tabTree1 = table(predictTrain, train$A16)
print(tabTree1)
1-sum(diag(tabTree1)) / sum(tabTree1)
#Evaluation du jeux de test à l'aide de a matrice de confision
predictTest = predict(tree, newdata = validation, type="class")
tabTree2 = table(predictTest, validation$A16)
print(tabTree2)
1-sum(diag(tabTree2)) / sum(tabTree2)
#================================Réseau de néronne
library(nnet)
library(usethis)
library(devtools)
library(neuralnet)
nerone = nnet(A16~A3+A8+A11, data = train, size=5, decay = 5e-4, maxit = 200)
print(nerone)
#plot.nnet(nerone)
#Evaluation du jeux de test
predictNetTest = predict(nerone, newdata = validation, type="class")
tabNet = table(predictNetTest, validation$A16)
print(tabNet)
#==============================================================================================================================
#===================================================5- Classification non supervisée
#===========a-) A l’aide de l’algorithme kmeans, séparer les données prétraitées à la question 3 en 4 groupes
data_sans_NA$A1 = NULL
data_sans_NA$A4 = NULL
data_sans_NA$A5 = NULL
data_sans_NA$A6 = NULL
data_sans_NA$A7 = NULL
data_sans_NA$A9 = NULL
data_sans_NA$A10 = NULL
data_sans_NA$A12 = NULL
data_sans_NA$A13 = NULL
data_sans_NA$A16 = NULL
summary(data_sans_NA)
algo_kmeans=kmeans( data_sans_NA, 4)
clusplot( data_sans_NA, algo_kmeans$cluster )
algo_kmeans=pam(data_sans_NA,4, metric="euclidean")
clusplot(data_sans_NA,lines=2,algo_kmeans$clustering)
#============b-) Utiliser un algorithme de classification hiérarchique pour séparer ces données et afficher le dendrogramme correspondant
algo_hier=agnes( data_sans_NA )
algo_hier$order
algo_hier$height = round(algo_hier$height,1)
algo_hier$height
pltree(algo_hier)
View(data_pr)
View(data_sans_NA)
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" | A2 != "?" | A3 != "?"
| A4 != "?" | A5 != "?" | A6 != "?"
| A7 != "?" | A8 != "?" | A9 != "?"
| A10 != "?" | A11 != "?" | A12 != "?"
| A13 != "?" | A14 != "?" | A15 != "?"  | A16 != "?")
View(data_sans_NA)
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" || A2 != "?" || A3 != "?"
|| A4 != "?" || A5 != "?" || A6 != "?"
|| A7 != "?" || A8 != "?" || A9 != "?"
|| A10 != "?" || A11 != "?" || A12 != "?"
|| A13 != "?" || A14 != "?" || A15 != "?"  || A16 != "?")
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" & A2 != "?" & A3 != "?"
& A4 != "?" & A5 != "?" & A6 != "?"
& A7 != "?" & A8 != "?" & A9 != "?"
& A10 != "?" & A11 != "?" & A12 != "?"
& A13 != "?" & A14 != "?" & A15 != "?"  & A16 != "?")
anyNA(data_sans_NA)
View(data_sans_NA)
data_pr_2 = data
#changement des ? en inconnue ou mediane
data_pr_2$A1[data_pr_2$A1 %in% "?"] = NA
data_pr_2$A2[data_pr_2$A2 %in% "?"] = "inconnue"
data_pr_2$A3[data_pr_2$A3 %in% "?"] = median(data_pr_2$A3)
data_pr_2$A4[data_pr_2$A4 %in% "?"] = "inconnue"
data_pr_2$A5[data_pr_2$A5 %in% "?"] = "inconnue"
data_pr_2$A6[data_pr_2$A6 %in% "?"] = "inconnue"
data_pr_2$A7[data_pr_2$A7 %in% "?"] = "inconnue"
data_pr_2$A8[data_pr_2$A8 %in% "?"] = median(data_pr_2$A8)
data_pr_2$A9[data_pr_2$A9 %in% "?"] = "inconnue"
data_pr_2$A10[data_pr_2$A10 %in% "?"] = "inconnue"
data_pr_2$A11[data_pr_2$A11 %in% "?"] = median(data_pr$A11)
data_pr_2$A12[data_pr_2$A12 %in% "?"] = "inconnue"
data_pr_2$A13[data_pr_2$A13 %in% "?"] = "inconnue"
data_pr_2$A14[data_pr_2$A14 %in% "?"] = "inconnue"
data_pr_2$A15[data_pr_2$A15 %in% "?"] = median(data_pr_2$A15)
summary(data_pr_2)
View(data_pr_2)
data_pr_2 = data
#changement des ? en inconnue ou mediane
data_pr_2$A1[data_pr_2$A1 %in% "?"] = NULL
data_pr_2$A2[data_pr_2$A2 %in% "?"] = "inconnue"
data_pr_2$A3[data_pr_2$A3 %in% "?"] = median(data_pr_2$A3)
data_pr_2$A4[data_pr_2$A4 %in% "?"] = "inconnue"
data_pr_2$A5[data_pr_2$A5 %in% "?"] = "inconnue"
data_pr_2$A6[data_pr_2$A6 %in% "?"] = "inconnue"
data_pr_2$A7[data_pr_2$A7 %in% "?"] = "inconnue"
data_pr_2$A8[data_pr_2$A8 %in% "?"] = median(data_pr_2$A8)
data_pr_2$A9[data_pr_2$A9 %in% "?"] = "inconnue"
data_pr_2$A10[data_pr_2$A10 %in% "?"] = "inconnue"
data_pr_2$A11[data_pr_2$A11 %in% "?"] = median(data_pr$A11)
data_pr_2$A12[data_pr_2$A12 %in% "?"] = "inconnue"
data_pr_2$A13[data_pr_2$A13 %in% "?"] = "inconnue"
data_pr_2$A14[data_pr_2$A14 %in% "?"] = "inconnue"
data_pr_2$A15[data_pr_2$A15 %in% "?"] = median(data_pr_2$A15)
summary(data_pr_2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dbConnect)
library(RMySQL)
library(dbConnect)
library(arules)
library(arulesViz)
library(gWidgets)
shiny::runApp()
runApp()
algo_kmeans=kmeans( data_sans_NA, 4)
plot( data_sans_NA, col = algo_kmeans$cluster, pch = 20, cex = 3 )
points(algo_kmeans$centers, pch = 4, cex = 4, lwd = 4)
algo_kmeans=pam(data_sans_NA,4, metric="euclidean")
clusplot(data_sans_NA,lines=2,algo_kmeans$clustering)
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" & A2 != "?" & A3 != "?"
& A4 != "?" & A5 != "?" & A6 != "?"
& A7 != "?" & A8 != "?" & A9 != "?"
& A10 != "?" & A11 != "?" & A12 != "?"
& A13 != "?" & A14 != "?" & A15 != "?"  & A16 != "?")
algo_kmeans=pam(data_sans_NA,4, metric="euclidean")
clusplot(data_sans_NA,lines=2,algo_kmeans$clustering)
runApp()
data = read.table("crx.data.txt",sep = ",",as.is = T)
names(data) = c("A1", "A2","A3","A4", "A5","A6","A7", "A8","A9","A10", "A11","A12","A13", "A14","A15", "A16")
data$A16 = as.factor(data$A16)
data = as.data.frame(data)
summary(data)
str(data)
#3- Prétraitement des données
#Methodes dee traitement de valeurs manquantes
#- Supprimer les enregistrements qui ont les valeurs manquantes si leur nombre est faible
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" & A2 != "?" & A3 != "?"
& A4 != "?" & A5 != "?" & A6 != "?"
& A7 != "?" & A8 != "?" & A9 != "?"
& A10 != "?" & A11 != "?" & A12 != "?"
& A13 != "?" & A14 != "?" & A15 != "?"  & A16 != "?")
data_sans_NA$A1 = NULL
data_sans_NA$A4 = NULL
data_sans_NA$A5 = NULL
data_sans_NA$A6 = NULL
data_sans_NA$A7 = NULL
data_sans_NA$A9 = NULL
data_sans_NA$A10 = NULL
data_sans_NA$A12 = NULL
data_sans_NA$A13 = NULL
data_sans_NA$A16 = NULL
summary(data_sans_NA)
algo_kmeans=kmeans( data_sans_NA, 4)
plot( data_sans_NA, col = algo_kmeans$cluster, pch = 20, cex = 3 )
points(algo_kmeans$centers, pch = 4, cex = 4, lwd = 4)
algo_kmeans=kmeans( data_sans_NA, 4)
clusplot( data_sans_NA, algo_kmeans$cluster )
points(algo_kmeans$centers, pch = 4, cex = 4, lwd = 4)
data_n_sup = data_sans_NA
data_n_sup$A1 = NULL
data_n_sup$A4 = NULL
data_n_sup$A5 = NULL
data_n_sup$A6 = NULL
data_n_sup$A7 = NULL
data_n_sup$A9 = NULL
data_n_sup$A10 = NULL
data_n_sup$A12 = NULL
data_n_sup$A13 = NULL
data_n_sup$A16 = NULL
summary(data_n_sup)
data_pr = data
data_sans_NA = subset(data_pr ,A1 != "?" & A2 != "?" & A3 != "?"
& A4 != "?" & A5 != "?" & A6 != "?"
& A7 != "?" & A8 != "?" & A9 != "?"
& A10 != "?" & A11 != "?" & A12 != "?"
& A13 != "?" & A14 != "?" & A15 != "?"  & A16 != "?")
algo_kmeans=kmeans( data_n_sup, 4)
clusplot( data_n_sup, algo_kmeans$cluster )
points(algo_kmeans$centers, pch = 4, cex = 4, lwd = 4)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(gWidgets)
library(RMySQL)
library(dbConnect)
library(arules)
library(arulesViz)
library(gWidgets)
library(RMySQL)
library(dbConnect)
library(arules)
library(arulesViz)
ruleVente=function(attribute='Designation'){
#Connexion + acc?s ? la BD
con=dbConnect(MySQL(),user='root',password='',dbname='app_db',host='localhost')
a="select Num_piece,"
b=" from toto_vente"
c=paste(a,b,sep = 'Designation')
vente=dbGetQuery(con,c)
#write.csv(BD,file = "vente_info")
vent=data.frame(vente$Num_piece,vente$Designation)
i=1
n=nrow(vent)  ###nombre de lignes
m=length(levels(vent[,"vente.Designation"]))## nombre d'?l?ments diff?rents
v1=rep(0,m)
names(v1)= levels(vent[,"vente.Designation"]) ##On utilise les noms des ?l?ments coe nom de colonnes
v1[vent[i,"venteDesignation"]]=1
while(vent[i,"vente.Num_piece"]==vent[i+1,"vente.Num_piece"]&&i<n)
{
v1[vent[i+1,"vente.Designation"]]=1
i=i+1
}
M=matrix(v1,ncol=m,byrow=T)
while(i<=n)
{
i=i+1
v1=rep(0,m)
names(v1)= levels(vent[,"vente.Designation"])
v1[vent[i,"vente.Designation"]]=1
while(vent[i,"vente.Num_piece"]==vent[i+1,"vente.Num_piece"]&&i<n)
{
v1[vent[i+1,"vente.Designation"]]=1
i=i+1
}
if(i<=n){M=rbind(M,v1)}
}
rownames(M)=levels(vent[,"vente.Num_piece"])
tr <- as(M, "transactions")
## Vous pouvez continuer avec l'extraction des r?gles telle que vue en cours.
parameter = list(supp = 0.01, conf = 0.09, target ="rules")
rules=apriori(tr,parameter)
viewRule = inspect(rules)
return(viewRule)
}
#============choisir attribut=============================================================
ruleAttributChoisi=function(attribute){
viewRule = inspect(ruleVente(attribute))
return(viewRule)
}
#==============================================================================================================
#### Il faut s?lectionner toute la suite et ex?cuter avec CRTL+R
ruleVente()
s = read.table("toto_vente.csv", sep = ",")
View(s)
library(gWidgets)
library(RMySQL)
library(dbConnect)
library(arules)
library(arulesViz)
ruleVente=function(attribute='Designation'){
#Connexion + acc?s ? la BD
con=dbConnect(MySQL(),user='root',password='',dbname='app_db',host='localhost')
a="select Num_piece,"
b=" from toto_vente"
c=paste(a,b,sep = 'Designation')
vente1=dbGetQuery(con,c)
#write.csv(BD,file = "vente_info")
vente = read.table("toto_vente.csv", sep = ",")
vent=data.frame(vente$Num_piece,vente$Designation)
i=1
n=nrow(vent)  ###nombre de lignes
m=length(levels(vent[,"vente.Designation"]))## nombre d'?l?ments diff?rents
v1=rep(0,m)
names(v1)= levels(vent[,"vente.Designation"]) ##On utilise les noms des ?l?ments coe nom de colonnes
v1[vent[i,"venteDesignation"]]=1
while(vent[i,"vente.Num_piece"]==vent[i+1,"vente.Num_piece"]&&i<n)
{
v1[vent[i+1,"vente.Designation"]]=1
i=i+1
}
M=matrix(v1,ncol=m,byrow=T)
while(i<=n)
{
i=i+1
v1=rep(0,m)
names(v1)= levels(vent[,"vente.Designation"])
v1[vent[i,"vente.Designation"]]=1
while(vent[i,"vente.Num_piece"]==vent[i+1,"vente.Num_piece"]&&i<n)
{
v1[vent[i+1,"vente.Designation"]]=1
i=i+1
}
if(i<=n){M=rbind(M,v1)}
}
rownames(M)=levels(vent[,"vente.Num_piece"])
tr <- as(M, "transactions")
## Vous pouvez continuer avec l'extraction des r?gles telle que vue en cours.
parameter = list(supp = 0.01, conf = 0.09, target ="rules")
rules=apriori(tr,parameter)
viewRule = inspect(rules)
return(viewRule)
}
#============choisir attribut=============================================================
ruleAttributChoisi=function(attribute){
viewRule = inspect(ruleVente(attribute))
return(viewRule)
}
#=========================================================================================
#### Il faut s?lectionner toute la suite et ex?cuter avec CRTL+R
ruleVente()
vente = read.table("toto_vente.csv", sep = ",")
vent=data.frame(vente$Num_piece,vente$Designation)
i=1
n=nrow(vent)  ###nombre de lignes
m=length(levels(vent[,"vente.Designation"]))## nombre d'?l?ments diff?rents
m=length(levels(vent[,"Designation"]))## nombre d'?l?ments diff?rents
View(s)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
data_sans_NA$A1 = ifelse(data_sans_NA$A1 == "a", 1, 0)
#===========a-) A l’aide de l’algorithme kmeans, séparer les données prétraitées à la question 3 en 4 groupes
data_sans_NA$A1 = as.factor(data_sans_NA$A1)
data_sans_NA$A1 = ifelse(data_sans_NA$A1 == "a", 1, 0)
data_sans_NA$A4 = NULL
data_sans_NA$A5 = NULL
data_sans_NA$A6 = NULL
data_sans_NA$A7 = NULL
data_sans_NA$A9 = NULL
data_sans_NA$A10 = NULL
data_sans_NA$A12 = NULL
data_sans_NA$A13 = NULL
data_sans_NA$A14 = NULL
data_sans_NA$A16 = NULL
summary(data_sans_NA)
data_sans_NA$A1 = NULL
data_sans_NA$A2 = NULL
data_sans_NA$A4 = NULL
data_sans_NA$A5 = NULL
data_sans_NA$A6 = NULL
data_sans_NA$A7 = NULL
data_sans_NA$A9 = NULL
data_sans_NA$A10 = NULL
data_sans_NA$A12 = NULL
data_sans_NA$A13 = NULL
data_sans_NA$A14 = NULL
data_sans_NA$A16 = NULL
summary(data_sans_NA)
algo_kmeans=kmeans( data_sans_NA, 4)
clusplot( data_sans_NA, algo_kmeans$cluster )
algo_kmeans=pam(data_sans_NA,4, metric="euclidean")
clusplot(data_sans_NA,lines=2,algo_kmeans$clustering)
algo_hier=agnes( data_sans_NA )
algo_hier$order
algo_hier$height = round(algo_hier$height,1)
algo_hier$height
pltree(algo_hier)
data_pr_2 = data
#changement des ? en inconnue ou mediane
data_pr_2$A1[data_pr_2$A1 %in% "?"] = "inconnue"
data_pr_2$A2[data_pr_2$A2 %in% "?"] = "inconnue"
data_pr_2$A3[data_pr_2$A3 %in% "?"] = median(data_pr_2$A3)
data_pr_2$A4[data_pr_2$A4 %in% "?"] = "inconnue"
data_pr_2$A5[data_pr_2$A5 %in% "?"] = "inconnue"
data_pr_2$A6[data_pr_2$A6 %in% "?"] = "inconnue"
data_pr_2$A7[data_pr_2$A7 %in% "?"] = "inconnue"
data_pr_2$A8[data_pr_2$A8 %in% "?"] = median(data_pr_2$A8)
data_pr_2$A9[data_pr_2$A9 %in% "?"] = "inconnue"
data_pr_2$A10[data_pr_2$A10 %in% "?"] = "inconnue"
data_pr_2$A11[data_pr_2$A11 %in% "?"] = median(data_pr$A11)
data_pr_2$A12[data_pr_2$A12 %in% "?"] = "inconnue"
data_pr_2$A13[data_pr_2$A13 %in% "?"] = "inconnue"
data_pr_2$A14[data_pr_2$A14 %in% "?"] = "inconnue"
data_pr_2$A15[data_pr_2$A15 %in% "?"] = median(data_pr_2$A15)
summary(data_pr_2)
algo_hier=agnes( data_pr_2 )
algo_hier$order
algo_hier$height = round(algo_hier$height,1)
algo_hier$height
pltree(algo_hier)
algo_hier=agnes( data_sans_NA )
algo_hier$order
algo_hier$height = round(algo_hier$height,1)
algo_hier$height
pltree(algo_hier)
runApp()
rect.hclust(data_sans_NA,k=4)
pairs(data_sans_NA)
fromage.cr<-scale(data_sans_NA,center = T,scale = T)
d.fromage<-dist(fromage.cr)
cah.ward<-hclust(d.fromage,method = "ward.D2")
plot(cah.ward)
rect.hclust(data_sans_NA,k=4)
rect.hclust(data_sans_NA,k=2)
algo_hier=agnes( data_sans_NA )
algo_hier$order
algo_hier$height = round(algo_hier$height,1)
algo_hier$height
pltree(algo_hier)
pairs(data_sans_NA)
fromage.cr<-scale(data_sans_NA,center = T,scale = T)
d.fromage<-dist(fromage.cr)
cah.ward<-hclust(d.fromage,method = "ward.D2")
plot(cah.ward)
runApp()
runApp()
runApp()
runApp()
runApp()
DT::dataTableOutput("table")
runApp()
runApp()
runApp()
runApp()
runApp()
# Load the ggplot2 package which provides
# the 'mpg' dataset.
library(ggplot2)
library(shiny)
library(cluster)
library(rpart)
library(rpart.plot)
source('C:/Users/JESUS-CHRIST/Desktop/TP-Data-mining/TP-M1-2.R', encoding = 'UTF-8')
source('C:/Users/JESUS-CHRIST/Desktop/TP-Data-mining/main.R')
function(input, output) {
#========================================SECTION TP1
output$table2 = renderDataTable({
if (input$tp1 == "data tp1") {
vente
}
})
rules = reactive({
ruleVente()
})
output$rule = renderPrint({
if( input$tp1 == "extraction des règles"){
rules()
}
})
#========================================SECTION TP2
output$table2 = renderTable({
if (input$tp2 == "data tp2") {
data
}
})
output$summary = renderTable({
if (input$tp2 == "distribution variable") {
summary(data)
}
})
output$nerone1 = renderPrint({
if (input$tp2 == "réseau de neurones") {
nerone$wts
}
})
output$arbre = renderPlot({
if (input$tp2 == "arbre de décision") {
rpart.plot(tree, extra = 4)
}else{
if (input$tp2 == "algorithme kmeans") {
clusplot(data_sans_NA,lines=2,algo_kmeans$clustering)
}else{
if (input$tp2 == "classification hiérarchique(dendogramme)") {
#pltree(algo_hier)
plot(cah.ward)
}
}
}
})
# Méthodes de prétraitement
output$tablePretraitement = renderTable({
if (input$choixTraitement == "supprission de NA") {
data_sans_NA
}
if (input$choixTraitement == "Remplacement de NA") {
data_pr
}
})
}
#shinyApp(ui = ui, server = server)
runApp()
nerone = nnet(A16~A3+A8+A11, data = train, size=5, decay = 5e-4, maxit = 200)
print(nerone)
#plot(nerone, hidden = 5)
diana(nerone)
predictNetTest = predict(nerone, newdata = validation, type="class")
tabNet = table(predictNetTest, validation$A16)
?diana
#plot(nerone, hidden = 5)
diana(validation)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
